@model Financeiro.Models.bancos_contas

@{
    ViewBag.Title = "Create";
}
<h4>Nova Conta</h4>
<hr />
@Html.ValidationSummary(true, "", new { @class = "text-danger" })

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="">
        <h4>Nova Conta</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.descricao, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.descricao, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.descricao, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bancos_id, "bancos_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("bancos_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.bancos_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.conta, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.conta, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.conta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.agencia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.agencia, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.agencia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.saldo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.saldo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.saldo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.nib, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nib, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nib, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.swift, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.swift, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.swift, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.iban, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.iban, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.iban, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.obs, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.obs, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.obs, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>-->

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
    <!--<script type="text/javascript">
        $(document).ready(function () {

            function onlyNumber(fields) {
                $(fields).unbind('keyup').bind('keyup', function (e) { //vou buscar o evento keyup - quando o usuário solta a tecla

                    var thisVal = $(this).val(); // atribuo o valor do campo a variável local
                    var tempVal = "";

                    for (var i = 0; i < thisVal.length; i++) {
                        if (RegExp("[a-zA-Z]").test(thisVal.charAt(i))) { // aqui estou usando uma expressão regular para limitar a entrada de apenas numeros ou seja digitos entre 0 e 9
                            tempVal += thisVal.charAt(i); //caso atenda a condição de ser um digito numérico, atribuo a uma variável temporária

                            if (e.keyCode == 8) {
                                tempVal = thisVal.substr(0, i); //o keyCode == 8 é para eu poder usar o backspace para apagar algum numero indesejado.
                            }
                        }
                    }
                    $(this).val(tempVal); // ao terminar, atribuo o valor validado ao valor do campo passado para testar
                });
            }

            onlyNumber($('input[id="sotexto"]')); // a chamada a função fica assim, é só passar o campo que deseja ser validdo

        });
    </script>-->